{
  "name": "Sparkline",
  "tagline": "PHP Class (using GD) to generate sparklines",
  "body": "[![Build Status](https://travis-ci.org/davaxi/Sparkline.svg)](https://travis-ci.org/davaxi/Sparkline)\r\n[![Latest Stable Version](https://poser.pugx.org/davaxi/sparkline/v/stable)](https://packagist.org/packages/davaxi/sparkline) \r\n[![Total Downloads](https://poser.pugx.org/davaxi/sparkline/downloads)](https://packagist.org/packages/davaxi/sparkline) \r\n[![Latest Unstable Version](https://poser.pugx.org/davaxi/sparkline/v/unstable)](https://packagist.org/packages/davaxi/sparkline) \r\n[![License](https://poser.pugx.org/davaxi/sparkline/license)](https://packagist.org/packages/davaxi/sparkline)\r\n\r\n## Installation\r\n\r\nThis page contains information about installing the Library for PHP.\r\n\r\n### Requirements\r\n\r\n- PHP version 5.3.0 or greater\r\n- The GD PHP extension\r\n\r\n### Obtaining the client library\r\n\r\nThere are two options for obtaining the files for the client library.\r\n\r\n#### Using Composer\r\n\r\nYou can install the library by adding it as a dependency to your composer.json.\r\n\r\n```\r\n  \"require\": {\r\n    \"davaxi/sparkline\": \"^1.0\"\r\n  }\r\n```\r\n\r\n#### Cloning from GitHub\r\n\r\nThe library is available on [GitHub](https://github.com/davaxi/Sparkline). You can clone it into a local repository with the git clone command.\r\n\r\n```\r\ngit clone https://github.com/davaxi/Sparkline.git\r\n```\r\n\r\n### What to do with the files\r\n\r\nAfter obtaining the files, ensure they are available to your code. If you're using Composer, this is handled for you automatically. If not, you will need to add the `autoload.php` file inside the client library.\r\n\r\n```\r\nrequire '/path/to/sparkline/folder/autoload.php';\r\n```\r\n\r\n## Usage\r\n\r\nExemple: \r\n\r\n![Sparkline](https://raw.githubusercontent.com/davaxi/Sparkline/master/tests/data/testGenerate2-mockup.png)\r\n\r\n```\r\n<?php\r\n\r\nrequire '/path/to/sparkline/folder/autoload.php';\r\n\r\n$sparkline = new Davaxi\\Sparkline();\r\n$sparkline->setData(array(2,4,5,6,10,7,8,5,7,7,11,8,6,9,11,9,13,14,12,16));\r\n$sparkline->display();\r\n\r\n?>\r\n```\r\n\r\n## Documentation\r\n\r\n```\r\n$sparkline = new Davaxi\\Sparkline();\r\n\r\n// Change format (Default value 80x20)\r\n$sparkline->setFormat('100x40');\r\n// or \r\n$sparkline->setWidth(100);\r\n$sparkline->setHeight(40);\r\n\r\n// Change background color (Default value #FFFFFF)\r\n$sparkline->setBackgroundColorHex('#0f354b');\r\n// or\r\n$sparkline->setBackgroundColorRGB(15, 53, 75);\r\n\r\n// Change line color (Default value #1388db)\r\n$sparkline->setLineColorHex('#1c628b');\r\n// or\r\n$sparkline->setLineColorRGB(28, 98, 139);\r\n\r\n// Change line thickness (Default value 1.75 px)\r\n$sparkline->setLineThickness(2.2);\r\n\r\n// Change fill color (Default value #e6f2fa)\r\n$sparkline->setLineColorHex('#8b1c2b');\r\n// or\r\n$sparkline->setLineColorRGB(139, 28, 43);\r\n\r\n$sparkline->setData(array(.....)); // Set data set\r\n$sparkline->generate(); // If ou want regenerate picture \r\n\r\n// If display\r\n$sparkline->setEtag('your hash'); // If you want add ETag header\r\n$sparkline->setFilename('yourPictureName'); // For filenamen header\r\n$sparkline->setExpire('+1 day'); // If you want add expire header\r\n// or\r\n$sparkline->setExpire(strtotime('+1 day'));\r\n$sparkline->display(); // Display with correctly headers\r\n\r\n// If save\r\n$sparkline->save('/your/path/to/save/picture');\r\n\r\n$sparkline->destroy(); // Destroy picture after generated / displayed / saved\r\n```\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}